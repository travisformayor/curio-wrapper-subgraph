// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class CardBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CardBalance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CardBalance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CardBalance", id.toString(), this);
  }

  static load(id: string): CardBalance | null {
    return store.get("CardBalance", id) as CardBalance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cardNumber(): BigInt {
    let value = this.get("cardNumber");
    return value.toBigInt();
  }

  set cardNumber(value: BigInt) {
    this.set("cardNumber", Value.fromBigInt(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }
}

export class SetBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SetBalance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SetBalance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SetBalance", id.toString(), this);
  }

  static load(id: string): SetBalance | null {
    return store.get("SetBalance", id) as SetBalance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get setName(): string {
    let value = this.get("setName");
    return value.toString();
  }

  set setName(value: string) {
    this.set("setName", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }
}

export class CurioUser extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CurioUser entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CurioUser entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CurioUser", id.toString(), this);
  }

  static load(id: string): CurioUser | null {
    return store.get("CurioUser", id) as CurioUser | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cards(): Array<string> {
    let value = this.get("cards");
    return value.toStringArray();
  }

  set cards(value: Array<string>) {
    this.set("cards", Value.fromStringArray(value));
  }

  get sets(): Array<string> {
    let value = this.get("sets");
    return value.toStringArray();
  }

  set sets(value: Array<string>) {
    this.set("sets", Value.fromStringArray(value));
  }

  get uniqueCards(): i32 {
    let value = this.get("uniqueCards");
    return value.toI32();
  }

  set uniqueCards(value: i32) {
    this.set("uniqueCards", Value.fromI32(value));
  }
}
